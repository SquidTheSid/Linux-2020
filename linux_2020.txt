Switching to Linux (From Windows) in 2020. 

So, the new decade's arrived and Windows 7's end of life approaches on January
14. As a holdout poweruser, you now have to make a tough decision.  Continue
using an unsupported operating system and hope nothing goes wrong or
begrudgingly make the switch to Windows 10, with neither choice being
particularly great. Thankfully, you also have a third option: switch to Linux.
That way, you'll still get up-to-date software while not having to deal with
Microsoft's current bullshit. 

So if you've heard about Linux in the past and want to make the jump soon, I'll
be guiding you through all of the necessary steps to get your system running
and ready for gaming. 

Before I get into that, I need to make a disclaimer. Linux is not Windows. It's
a completely different operating system with its own design philosophies and
nuances. So forget what you already know about Windows and come into Linux with
an open mind, ready to relearn some of the basics. Now, you don't need to
become a system administrator, but a brief understanding of how your computer
works will make your life a lot easier, especially when troubleshooting.
Strictly speaking, this isn't necessary and you can stick entirely to graphical
menus, but I recommend learning the essentials so you can play more games and
further customize your desktop experience.     

Part 0: Reasons Why

So, why would you use Linux over Windows? I'll try to keep this list rather
concise, so I'll avoid going into overly technical details.

1). If you want up-to-date security updates, your only other choice besides
Windows 10 is a Hackintosh. If you're like me and despise Microsoft's trashfire
of an operating system, then Linux is your only real alternative for PC gaming.
Another benefit here is that anti-virus is generally not needed, due to Linux
having stricter file permissions system amd software repositories. As a result,
you don't need to worry about Norton or McAfee hogging up resources that could
be otherwise used for a game. 

2). Linux is completely free. You can legally download it at no cost and use it
how you see fit, without dealing with Microsoft's licensing and arcane terms of
service. For all intents and purposes, every version of Linux is considered a
"genuine" copy, so you don't need to deal with that headache. Another thing to
consider here is that important poweruser features aren't locked behind another
paywall ( like Windows 10's offline bitlocker support and the group policy
editor).  


3). Linux generally has no bloatware. You install it without receiving constant
advertisements for candy crush saga or dealing with cortana's constant nagging.
And don't even get me started on all of the obnoxious telemetry baked into
Windows 10 by default. While you can disable those to an extent if you're on a
Pro version or higher, it's extremely annoying to get rid of all of the
pre-installed crap, as you have to mess around with the group policy editor,
batch scripts, host files, and so on. Even then, Microsoft can add everything
back in a future update, so get ready to deal with lots of uphill battles. On
the other hand, Linux respects you by default and doesn't make you jump through
hoops to have some peace of mind. 

4). Linux is everywhere. Though you might not see it on your desktop, it's the
backbone of the internet, with Google, Amazon, and Facebook's servers running
off of it. Teslas and Toyotas use automotive grade linux. If you have an
Android phone, that runs off of linux. As a result of its wide enterprise use,
there's a very good chance that your hardware will be supported out of the box,
even if it's a more obscure piece of tech.

That's not to say that Linux doesn't have its downsides, the major one being
software support. While WINE is a great way to run Windows-exclusive programs,
you might encounter software bugs that aren't on Microsoft's platform. There
are also applications that flat out refuse to work. I haven't noticed many of
these beyond games with anticheat or DRM, but they do exist. So if you have a
particular piece of software that does not work on Linux, it might be worth
keeping around a Windows partition for that.

Part 1: Selecting Your Distro

For those of you that already know what flavor of Linux you want to run, feel
free to skip this section. Otherwise, I highly recommend listening.

Unlike Windows, there are multiple variations of Linux available, known
collectively as distributions. While these "distros" function similarly under
the hood, they can vary drastically in their included software, update cycles,
and desktop experiences. With such a large selection to pick from, I'm going to
be curating my list to only include a handful of distros that I find to be
extremely user friendly. So I won't be discussing more advanced options like
Arch, Void, or Gentoo. 

The first recommendation I have is Pop!_OS. It's based on Ubuntu, but includes
some great quality of life tweaks provided by its developer, System 76. The
default desktop environment is called GNOME 3, which offers up a rather unique
user experience.  If you're not a fan, then you can install extensions to change
functionality, such as adding in a more traditional start menu or a window bar.
I will be listing some of these in their respective section as well as describe
how to install them. 

The second recommendation is Solus. Unlike Pop!_OS, it's a completely
independent distribution that seeks to offer a curated desktop experience. Its
flagship desktop enviroment is budgie, which offers a more traditional user
interface than GNOME. This is my distro of choice, and my daily driver. It is
leaner on software support than Ubuntu, but I find it to have the essentials,
which tend to be more up to date. 

Finally, I'll be covering Linux Mint. Out of all the distros mentioned on this
list, it offers up an experience most similar to Windows 7. So if you don't
want to have to deal with GNOME or want a more robust software repository, then
Mint is a great choice. 

Of course, there are many other fantastic flavors of Linux out there, such as
Manjaro or Kubuntu, but I'll focus on those three for now, to keep this video
rather accessible. 

Part 2: Setup.

To get started, all you need is a spare flash drive and an internet connection.
For advanced users, you can go ahead and configure options in your
motherboard's BIOS right now. I'd recommend disabling secure
boot, so you don't run into any problems with that later on.  

For me, I had press the delete key to enter my BIOS menu when booting my
computer. A single press should be sufficient when you see your manufacturer
splash screen logo, but it doesn't hurt to mash it. Once there, enter your
settings menu, go to the security tab, and make sure that the trusted computing
or secure boot option is disabled. This will vary from motherboard to
motherboard, so you might have to look around for a bit. You can also change
device boot priority while in your BIOS, so a flash drive can have precedence
over a hard drive, though this is not necessary. Save your changes and then
reboot your computer.  

Now, while in Windows, navigate to the website of your linux distro
of choice. Pop OS is located on system76.com/pop, Linux Mint is on
linuxmint.com, and Solus is on getsol.us. Links will be provided in the video
description. From here, navigate to the download page and choose the appropiate
link. System 76 provides different files based on your graphics card
manufacturer, so be sure to choose the one that matches your current installed
GPU. 

For advanced users, you can go ahead and download the additional SHA256SUM
file, which allows you to check the integrity of the operating system you just
downloaded. This is not necessary by any means, but it guarantees that you got
the right file and that nothing was damaged during the download. To validate
the output of the iso file, use Windows' CertUtil in the command prompt to
generate the checksum.  Type in certUtil -hashfile yourFilesFullPatch SHA256 to
generate the appropriate output.  If it matches the one on your distro
provider's website, then you're good to go. 

From here on, you'll need a program to burn the Linux iso file to a flash
drive. Some notable programs include rufus or balenaEtcher. I'll be using the
latter due to its simplicity. Keep in mind that this process will wipe the
drive, so save all data that you don't want to lose. Once you're ready, select
your iso file, then your thumb drive, and proceed to flashing.  

Once you've finished with that, restart your computer. When you see the splash
screen, hit the F11 key to enter the boot menu.  From here on, you can select
your linux flash drive to boot on instead of your Windows installation. If you
haven't adjusted boot priority in the BIOS, then you will load into Windows by
default, so do not forget to do this step. 

Now, my motherboard manufacturer is MSI. Different companies can assign
different hotkeys to the boot and BIOS menu, so be sure to consult your manual
if they're not listed on the splash screen.

After a short wait, you're taken into a live desktop environment. From here,
you can play around with the UI and get used to it before making any
committments. If you like what you've seen, then click the install icon and
walk through the installer. You're generally given the option to select if you
want to create a new Linux partition to coexist with your Windows install, or
dedicate the entire drive to Linux. Generally, it's a bit easier to do the
latter option, but you lose all existing data on the drive.

I'll be doing the second option since it's easier to show off, so if you'd like
to follow along, be sure to back up all of your important files to another
drive or to the cloud. Alternatively, you can select to create a Linux
partition alongside your current install instead of doing a clean start. 

Once you've finished customizing all of your option the graphical installer and
rebooted your computer, you now have a brand new Linux machine. Feel free to
play around with it and tweak your settings to your heart's content. 

From this point on, I'll be splitting the video into two more sections. The
next one will focus exclusively on gaming-related steps, while the following
section will focus on advanced Linux information such as file tree hierachies,
software repositories, and package managers. Feel free to skip the sections
that aren't relevant to you. 

Part 3: Basic Gaming

This section explains how to keep your software updated, install  drivers (for
Nvidia users), and setup Steam.  We'll also cover Steam play, but will only
talk about officially whitelisted titles alongside native games.  

Press the Windows key to launch the start menu (note: in Linux, this key is
referred to as the super key).  From here, type in "software" and you should
see something along the lines of Software Center or Software Manager appear. 

Unlike on Windows, all of your software should be located and installed from
this repository. That way, you can easily keep all of your programs up to date,
and search for new ones as necessary. The concept of downloading an exe file
online and installing it manually doesn't really exist on linux, so get used to
finding all of your software here. There are other ways to install and manage
your programs on Linux, but I'd only recommend looking into that if you're a
more advanced user. 

Now comes the point where you need to manager your drivers. If you use Intel
and/or AMD hardware, then all you need to do is keep your Linux install
up-to-date, as their drivers are included directly in system updates.
Specifically, they're located in the linux kernel, so make sure that isn't too
out of date. Nvidia users don't have it quite as easy, as their drivers aren't
directly integrated into the operating system. By default, you should have
something like the nouveau driver installed. While this is fine for browsing
the net or watching videos, it's not suited for gaming. So you'll need to
install the correct proprietary driver. Doing so manually isn't recommended due
to how many choices you have. I'd recommend using your system's hardware
drivers utility to automatically install the correct nvidia driver as it's the
least painful way of doing so.

Once you've updated your programs, it's time to get Steam setup. Thankfully,
it's handily located in most software repositories, so all you need to do is
look it up in the search bar. Once you've found the right package, click
install and enter your password. At this point, I'd also recommend installing
the Wine and winetricks packages, as those are also incredibly useful. From
this point on, the Steam experience is nearly identical to that of Windows.
Enter your account credentials and launch the client. Then, you're free to
install and play any native or proton whitelisted titles such as Overload and
My Friend Pedro. Just make sure that Steam Play is enabled in the settings
menu. 

And that's it. You've now got your rig setup for basic linux gaming. 

Part 4: Advanced Gaming 

Okay, you've exhausted the whitelist and want to branch out. Perhaps you want
to play a game on GOG or try out some other games.  Unfortunately, the process
is not as straightforward. And in the case of some more problematic titles,
you'll need to use the terminal. But, I'll guide you through that too, so don't
be afraid. 

To handle your non-steam library, I'd highly recommend checking out Lutris.
It's a free launcher that allows you to easily manage all of your PC titles
from GOG and the like. Just search for the game or application you want to
install and run the community-made script to automate installation. Do keep in
mind that some games have issues while others don't work. Check out the
community ratings on lutris.net to see if your particular games run or not. 

For advanced Steam Play, check the "Enable Steam Play for all titles" button in
your Steam settings menu. Doing this will show your entire library and open it
up for experimentation. Before you jump in, I'd strongly recommend referencing
ProtonDB, a community-curated list of compatibility ratings. These range from
flawless out of the box, to completely borked, so it really depends on the
title.

More often than not, if a game isn't outright broken by DRM or anticheat, it'll
usually runs with some tweaks. These can be as simple as renaming a launcher or
moving some files, to as complicated as using proton/winetricks to fix the
product key verification for Age of Empires 3, or enabling a virtual desktop
for Sleeping Dogs and shuffling it between workspaces.  

Some other community-made tools to help you out are Protontricks and
mf-install. The former is a wrapper script that simplifies setting up
Winetricks for Steam games, while the latter adds in support for Media
Foundation, letting you play some otherwise broken games like Blasphemous.

Setting these up does require me to explain the terminal to you. If that's
something you'd rather not deal with, I'd recommend sticking to native and
whitelisted games.  

Using the super key, launch the terminal. Some distros have this mapped to a
shortcut, like super + T. Once you've launched the terminal, you'll see a
prompt, usually your username followed by your computer's hostname.  In my
case, it's squidthesid@solaire. 

After that, you'll notice a tilde, or squigly line. This is a shorthand for
your home directory (/home/yourusername). There are other major system
directories, but it's not necessary to go into those for the scope of this
video. 

To see all of the files and folders in the current directory, type in the
command "ls". You'll notice that folders will have a different highlight color
from files. Now, this isn't all you can do with the "ls" command. If you want
to view hidden files or folders (these have a period proceeding any text) add
in the -a option after you type in "ls" but before you enter the command in.
The full string should be "ls -a". Notice that a lot more files have appeared
here. These hidden folders generally contain configuration files that you can
use to alter applications. For now, it's not something you need to be concerned
about. Additionally, you can enter in arguments for certain commands. an
argument will trail after the main command and any relevant options. For
example, if type in "ls -l testfile", the terminal will output a detailed list
of information about the testfile, including permissions, file size, date of
creation, and so on. 

If you ever forget what a command is or don't know what its options or
arguments are, then be sure to memorize the "man" command. By typing in man
before any command you execute (think of the command you want information on as
an argument), you can pull up the manual page for said command.  So if I type
in "man ls", the manual page will appear, showing me a brief description of the
command, how it's used, and all of the options available. Here, we can see -a
clearly. To navigate, use the spacebar to go down the page, and the "b" key to
go back up. Once you're done looking at information, press the "q" key to exit
back to the main terminal screen. An alternative option if you want a more
concise list of information or if a man page does not exist is to use the
--help option, with no arguments. I personally prefer manpages, but pick
whichever you like better. 

Now, to navigate between directories, you need to use the "cd" command. To go
down a specific folder, type in cd followed by that folder's name. So to go
into my documents folder, I'd type in "cd Documents". To go up to a higher
directory (i.e. the opposite direction you came from), type in "cd ..". Notice
that I'm back in my home directory, and I can see that Documents is a
subdirectory of home. You can also chain these commands together, so if you
want to access a subfolder two levels deep, you can type in the full path,
separated by slashes. For example, to go to the TestFolder in my Documents
folder from my home directory, I would type in "cd Documents/TestFolder". To go
up two levels to my home directory, I would simply use "cd ../..". At any time,
if you want to ever access the home directory, you can type in cd with no
arguments or options, and you'll be taken directly there. 

So using this information, we can now find the Steam directory and the games
we've installed. In my case, it's located in
.var/app/com.valvesoftware.Steam/.local/share/Steam, but it depends on the
install. I've seen it as a hidden folder simply called .Steam.  If you're
unsure of where it is, you can use the find command. Type in find followed by a
single period as an argument (a single period refers to the current directory,
so if we're in home, it's ~). After that, use the -iname function, which does a
case insenstive search based on whatever query you're looking for. Again, you
can refer to find's man page at any time if you're confused. 

Now cd into the Documents folder. If you ever forget what folders are in the
current path, you can double press tab to show what's there. A single tab press
will autocomplete the command, if possible. 

We're going to setup mf-install and protontricks. While you can manually
download and unpack the releases, I find it more convenient to use git.  If you
do not have git installed, please download it from your software center.
Alternatively, you can use the package manager in terminal. To install any
program, you need to have superuser or root permissions. To run an elevated
command, you'd need to put sudo before it and enter your password when you
execute it. So if I want to install git on Ubuntu, I would do "sudo" followed
by the name of the package manager (Ubuntu's is called "apt") then "install",
and concluding with the name of the package you want to download. So to install
git, we would do "sudo apt install git". If you want to install multiple
packages at once, separate their names with a blankspace. If you don't know the
name of the program you want, you can use the search command built into the
package manager. On Ubuntu, that would be "apt search git", and it will list
all of the packages containing git. 

While version control is a very complicated beast, we're only going to use git
to clone (or "copy") the online repos that we want. In your web browser, click
on the green button that says "clone or download" on the github page. Copy the
url and paste it in your terminal following these commands "git clone". Do note
that in the terminal, you need to hold shift to paste with a hotkey, as the
shell will interpret Ctrl V and Ctrl C as commands otherwise. So to paste the
url, we'd use Ctrl + Shift + V. So the full command to clone protontricks is
"git clone https://github.com/Matoking/protontricks.git". This will download a
copy of that repository into your current folder.

To install protontricks, we need to have the pre-requisite packages, so install
those based on what distro you have.  For Ubuntu, it's "sudo apt install
python3-pip python3-setuptools python3-venv". Follow the commands listed for
pipx to install protontricks. 

Let's try fixing Age of Empires 3 now. We can see that we need to use
protontricks to install the missing requirements. Do Protontricks -s Age of
Empires 3 to pull up the game's application id. Following that, use
protontricks 105450 (AoE'3 steam app id) mfc42 windxp l3codecx. Once you've
done that, you can now relaunch the game. Notice that the broken CD-key
activation screen now works!  In general, this is how you're going to be fixing
your games, but be sure to consult ProtonDB for each specific title. 

Part 5: Conclusion 

Well, thank you guys for watcjomg. I hope this video was helpful to you in
figuring out if Linux is for you. There's definitely a learning curve, but just
keep at it and continue using it. You'll get more comfortable with the terminal
and like. And don't forget that there's a massive community eager to help out
noobs (such as the linux4noobs sub-reddit). Regarding future videos, the
holidays are now over, so I'm ready to get back into production. The next video
will be on Jamestown Plus, followed by some other smaller games I've played
recently. Saya no Uta and DUSK are still happening, but those got pushed to the
backburner due to life. I still want to talk about them, so they will happen,
but I don't know when they'll be out. 

If you'd like to follow channel news, you can join the Squidcord discord server
or follow me on Twitter @SquidTheSid1 to see upcoming announcements. Finally,
if you'd like to be absolved of all guilt from using an ad blocker, you can
financially support the channel by becoming a YouTube member or joining my
Patreon page. I've recently added in a new tier, so it should be more
accessible to everyone now. Every little bit of help puts me one step close
towards making this dream into a full time career.

As always, stay frosty. 
